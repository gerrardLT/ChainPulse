// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

// 用户表
model User {
  id            String   @id @default(uuid()) @db.Uuid
  walletAddress String   @unique @map("wallet_address") @db.VarChar(42)
  ensName       String?  @map("ens_name") @db.VarChar(255)
  avatarUrl     String?  @map("avatar_url") @db.VarChar(512)
  email         String?  @db.VarChar(255)
  isActive      Boolean  @default(true) @map("is_active")
  lastLoginAt   DateTime? @map("last_login_at") @db.Timestamptz()
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt     DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  // Relations
  smartAccounts      SmartAccount[]
  eventSubscriptions EventSubscription[]
  notifications      Notification[]
  automationRules    AutomationRule[]
  telegramConfigs    TelegramConfig[]
  discordConfigs     DiscordConfig[]
  userSessions       UserSession[]
  auditLogs          AuditLog[]

  @@map("users")
}

// 智能账户表
model SmartAccount {
  id               String   @id @default(uuid()) @db.Uuid
  userId           String   @map("user_id") @db.Uuid
  accountAddress   String   @unique @map("account_address") @db.VarChar(42)
  ownerAddress     String   @map("owner_address") @db.VarChar(42)
  accountType      String   @default("erc4337") @map("account_type") @db.VarChar(50)
  chainId          Int      @default(1) @map("chain_id")
  isDeployed       Boolean  @default(false) @map("is_deployed")
  deploymentTxHash String?  @map("deployment_tx_hash") @db.VarChar(66)
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt        DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  // Relations
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventSubscriptions  EventSubscription[]
  automationRules     AutomationRule[]

  @@index([userId])
  @@index([chainId])
  @@index([accountAddress])
  @@map("smart_accounts")
}

// 事件订阅表
model EventSubscription {
  id                    String   @id @default(uuid()) @db.Uuid
  userId                String   @map("user_id") @db.Uuid
  smartAccountId        String?  @map("smart_account_id") @db.Uuid
  chainId               Int      @map("chain_id")
  contractAddress       String?  @map("contract_address") @db.VarChar(42)
  eventType             String   @map("event_type") @db.VarChar(100)
  filterConditions      Json?    @map("filter_conditions") @db.JsonB
  notificationChannels  String[] @default([]) @map("notification_channels")
  isActive              Boolean  @default(true) @map("is_active")
  createdAt             DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt             DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  // Relations
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  smartAccount   SmartAccount? @relation(fields: [smartAccountId], references: [id], onDelete: SetNull)
  notifications  Notification[]

  @@index([userId])
  @@index([smartAccountId])
  @@index([chainId, contractAddress])
  @@index([eventType])
  @@map("event_subscriptions")
}

// 通知表 (分区表 - 需要在 PostgreSQL 中手动创建分区)
model Notification {
  id             String   @id @default(uuid()) @db.Uuid
  userId         String   @map("user_id") @db.Uuid
  subscriptionId String?  @map("subscription_id") @db.Uuid
  eventId        String?  @map("event_id") @db.Uuid
  title          String   @db.VarChar(255)
  message        String   @db.Text
  priority       String   @default("medium") @db.VarChar(20)
  channel        String   @db.VarChar(50)
  isRead         Boolean  @default(false) @map("is_read")
  readAt         DateTime? @map("read_at") @db.Timestamptz()
  metadata       Json?    @db.JsonB
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz()

  // Relations
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription EventSubscription? @relation(fields: [subscriptionId], references: [id], onDelete: SetNull)

  @@index([userId, createdAt])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}

// 自动化规则表
model AutomationRule {
  id                String   @id @default(uuid()) @db.Uuid
  userId            String   @map("user_id") @db.Uuid
  smartAccountId    String   @map("smart_account_id") @db.Uuid
  name              String   @db.VarChar(255)
  description       String?  @db.Text
  triggerType       String   @map("trigger_type") @db.VarChar(50)
  triggerConditions Json     @map("trigger_conditions") @db.JsonB
  actionType        String   @map("action_type") @db.VarChar(50)
  actionParams      Json     @map("action_params") @db.JsonB
  isActive          Boolean  @default(true) @map("is_active")
  executionCount    Int      @default(0) @map("execution_count")
  lastExecutedAt    DateTime? @map("last_executed_at") @db.Timestamptz()
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt         DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  smartAccount SmartAccount @relation(fields: [smartAccountId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([smartAccountId])
  @@index([isActive])
  @@map("automation_rules")
}

// Telegram 配置表
model TelegramConfig {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @unique @map("user_id") @db.Uuid
  chatId    String   @map("chat_id") @db.VarChar(255)
  username  String?  @db.VarChar(255)
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("telegram_configs")
}

// Discord 配置表
model DiscordConfig {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @unique @map("user_id") @db.Uuid
  webhookUrl String   @map("webhook_url") @db.VarChar(512)
  isActive   Boolean  @default(true) @map("is_active")
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("discord_configs")
}

// 事件缓存表 (分区表 - 需要在 PostgreSQL 中手动创建分区)
model EventsCache {
  id              String   @id @default(uuid()) @db.Uuid
  chainId         Int      @map("chain_id")
  contractAddress String   @map("contract_address") @db.VarChar(42)
  eventType       String   @map("event_type") @db.VarChar(100)
  transactionHash String   @map("transaction_hash") @db.VarChar(66)
  blockNumber     BigInt   @map("block_number")
  blockTimestamp  DateTime @map("block_timestamp") @db.Timestamptz()
  data            Json     @db.JsonB
  synced          Boolean  @default(true)
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz()

  @@index([chainId, contractAddress])
  @@index([eventType])
  @@index([blockTimestamp])
  @@index([transactionHash])
  @@map("events_cache")
}

// 用户会话表
model UserSession {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @map("user_id") @db.Uuid
  jwtToken     String   @map("jwt_token") @db.Text
  ipAddress    String?  @map("ip_address") @db.VarChar(45)
  userAgent    String?  @map("user_agent") @db.Text
  isActive     Boolean  @default(true) @map("is_active")
  lastActiveAt DateTime @default(now()) @map("last_active_at") @db.Timestamptz()
  expiresAt    DateTime @map("expires_at") @db.Timestamptz()
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz()

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@map("user_sessions")
}

// 审计日志表 (分区表 - 需要在 PostgreSQL 中手动创建分区)
model AuditLog {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String?  @map("user_id") @db.Uuid
  action     String   @db.VarChar(100)
  resource   String   @db.VarChar(100)
  resourceId String?  @map("resource_id") @db.Uuid
  details    Json?    @db.JsonB
  ipAddress  String?  @map("ip_address") @db.VarChar(45)
  userAgent  String?  @map("user_agent") @db.Text
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz()

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}

